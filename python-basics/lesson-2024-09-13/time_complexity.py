
# Time complexity

# O(1)

def greet(day):
    print('Hello all, have a great start of the day.') 


# greet('Friday') # O(1)
# greet('Today is Friday.') # O(1)

def division(*args):
    return args[0] / 10

# print(division(30, 50, 100, 500, 1000)) # O(1)



def pick_last(lst):
    return lst[-1]

# print(pick_last([30, 7, 100, 5, 80, 20, 555])) # O(1)


import time

start = time.time()

# print(pick_last([30, 7, 100, 5, 80, 20, 555])) # O(1)

# print(pick_last([30, 7, 100, 5, 80, 20, 555, 4000, 22, 70, 2, 333, 7000])) # O(1)

end = time.time()

# print(f'Execution time: {end - start}')



# O(n)


def get_items(lst):
    n = len(lst)            # --> O(1)
    for i in range(n):
        print(lst[i])       # --> O(n)


start = time.time()

# get_items([30, 7, 100, 5, 80, 20, 555]) # --> O(1) + O(n) ~ O(n)

end = time.time()

# print(f'Execution time: {end - start}')



# O(n^2)

def make_pair(lst):
    n = len(lst)            # --> O(1)
    for i in range(n):      # --> O(n)
        for j in range(n):  # --> O(n)
            print(f'{lst[i]}  ==> {lst[j]*4432*8234*2034}')  # --> O(n*n) --> O(n^2)


# numbers = [30, 7, 100, 5, 80, 20, 555] # --> O(1) + O(n) + O(n^2) ~ O(n^2)

numbers = [30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555, 30, 7, 100, 5, 80, 20, 555]

start = time.time()
# make_pair(numbers)
# print(pick_last(numbers))
end = time.time()
# print(f'Execution time: {end - start}')




def factorial(n):
    if n == 0:
        return 1    # O(1)
    else:
        return n * factorial(n - 1)   # O(n)
    

# print(factorial(7)) # --> O(1) + O(n) ~ O(n)


# Assumptions --> O(log(n!)) --> O(n^2) --> O(n) -- O(2^n)


# Bubble sort

'''
        o
---------o---------------------------
----------o--------------------------
---------o---------------------------
---------o---------------------------
-----------o-------------------------
----------o--------------------------

'''

num_list = [55, 80, 3, 12, 70, 20, 133, 7, 200, 45]

            # [55, 80,]

# --> [3, 7, 12, 20, 45, 55, 70, 80, 133, 200]


def bubble_sort(lst):
    n = len(lst) # O(1)

    for i in range(n): # O(n)
        # print(lst)
        for j in range(n-1):  # O(n*n) --> O(n^2)
            if lst[j] > lst[j+1]:
                lst[j], lst[j+1] = lst[j+1], lst[j]
                # print(lst)

    return lst

print(f'Original list: {num_list}')
print(f'Sorted list: {bubble_sort(num_list)}') # --> O(1) + O(n^2) ~ O(n^2)


# x=4
# y=8
# z = x
# x = y
# y = z

# x, y = y, x
# x = 8, y = 4
